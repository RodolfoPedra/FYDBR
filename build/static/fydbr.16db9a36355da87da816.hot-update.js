webpackHotUpdate("fydbr",{

/***/ "./packages/mars-theme/src/components/post.js":
/*!****************************************************!*\
  !*** ./packages/mars-theme/src/components/post.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./link */ \"./packages/mars-theme/src/components/link.js\");\n/* harmony import */ var _list__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./list */ \"./packages/mars-theme/src/components/list/index.js\");\n/* harmony import */ var _featured_media__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./featured-media */ \"./packages/mars-theme/src/components/featured-media.js\");\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var Post=(_ref)=>{var{state,actions,libraries}=_ref;console.log(\"state: \",state);// window.state = state;\nconsole.log(\"actions: \",actions);console.log(\"libraries: \",libraries);// Get information about the current URL.\nvar data=state.source.get(state.router.link);console.log(\"data post: \",data.type,data.id);// Get the data of the post.\nvar post=state.source[data.type][data.id];// Get the data of the author.\nvar author=state.source.author[post.author];// Get a human readable date.\nvar date=new Date(post.date);// Get the html2react component.\nvar Html2React=libraries.html2react.Component;/**\r\n   * Once the post has loaded in the DOM, prefetch both the\r\n   * home posts and the list component so if the user visits\r\n   * the home page, everything is ready and it loads instantly.\r\n   */Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useEffect\"])(()=>{actions.source.fetch(\"/\");_list__WEBPACK_IMPORTED_MODULE_4__[\"default\"].preload();},[]);// Load the post, but only if the data is ready.\nreturn data.isReady?Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(Container,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(Title,{dangerouslySetInnerHTML:{__html:post.title.rendered}}),data.isPost&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"div\",null,author&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(StyledLink,{link:author.link},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(Author,null,\"By \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"b\",null,author.name))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(DateWrapper,null,\" \",\"on \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"b\",null,date.toDateString())))),state.theme.featured.showOnPost&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(_featured_media__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{id:post.featured_media}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(Content,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(Html2React,{html:post.content.rendered}))):null;};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(Post));var Container=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"emgezev0\",label:\"Container\"})( false?undefined:{name:\"ozz26u\",styles:\"width:800px;margin:0;padding:24px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Title=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"h1\",{target:\"emgezev1\",label:\"Title\"})( false?undefined:{name:\"vuejbj\",styles:\"margin:0;margin-top:24px;margin-bottom:8px;color:rgba(12,17,43);\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var StyledLink=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_link__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{target:\"emgezev2\",label:\"StyledLink\"})( false?undefined:{name:\"qar1bk\",styles:\"padding:15px 0;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Author=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"p\",{target:\"emgezev3\",label:\"Author\"})( false?undefined:{name:\"d1uwmw\",styles:\"color:rgba(12,17,43,0.9);font-size:0.9em;display:inline;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var DateWrapper=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"p\",{target:\"emgezev4\",label:\"DateWrapper\"})( false?undefined:{name:\"d1uwmw\",styles:\"color:rgba(12,17,43,0.9);font-size:0.9em;display:inline;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});/**\r\n * This component is the parent of the `content.rendered` HTML. We can use nested\r\n * selectors to style that HTML.\r\n */var Content=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"emgezev5\",label:\"Content\"})( false?undefined:{name:\"3l0ca9\",styles:\"color:rgba(12,17,43,0.8);word-break:break-word;*{max-width:100%;}p{line-height:1.6em;}img{width:100%;object-fit:cover;object-position:center;}figure{margin:24px auto;width:100% !important;figcaption{font-size:0.7em;}}iframe{display:block;margin:auto;}blockquote{margin:16px 0;background-color:rgba(0,0,0,0.1);border-left:4px solid rgba(12,17,43);padding:4px 16px;}a{color:rgb(31,56,197);text-decoration:underline;}input[type=\\\"text\\\"],input[type=\\\"email\\\"],input[type=\\\"url\\\"],input[type=\\\"tel\\\"],input[type=\\\"number\\\"],input[type=\\\"date\\\"],textarea,select{display:block;padding:6px 12px;font-size:16px;font-weight:400;line-height:1.5;color:#495057;background-color:#fff;background-clip:padding-box;border:1px solid #ced4da;border-radius:4px;outline-color:transparent;transition:outline-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out;margin:8px 0 4px 0;&:focus{outline-color:#1f38c5;}}input[type=\\\"submit\\\"]{display:inline-block;margin-bottom:0;font-weight:400;text-align:center;white-space:nowrap;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;background-image:none;border:1px solid #1f38c5;padding:12px 36px;font-size:14px;line-height:1.42857143;border-radius:4px;color:#fff;background-color:#1f38c5;}@media (min-width:420px){img.aligncenter,img.alignleft,img.alignright{width:auto;}.aligncenter{display:block;margin-left:auto;margin-right:auto;}.alignright{float:right;margin-left:24px;}.alignleft{float:left;margin-right:24px;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9tYXJzLXRoZW1lL3NyYy9jb21wb25lbnRzL3Bvc3QuanM/ZGVkOCJdLCJuYW1lcyI6WyJQb3N0Iiwic3RhdGUiLCJhY3Rpb25zIiwibGlicmFyaWVzIiwiY29uc29sZSIsImxvZyIsImRhdGEiLCJzb3VyY2UiLCJnZXQiLCJyb3V0ZXIiLCJsaW5rIiwidHlwZSIsImlkIiwicG9zdCIsImF1dGhvciIsImRhdGUiLCJEYXRlIiwiSHRtbDJSZWFjdCIsImh0bWwycmVhY3QiLCJDb21wb25lbnQiLCJ1c2VFZmZlY3QiLCJmZXRjaCIsIkxpc3QiLCJwcmVsb2FkIiwiaXNSZWFkeSIsIl9faHRtbCIsInRpdGxlIiwicmVuZGVyZWQiLCJpc1Bvc3QiLCJuYW1lIiwidG9EYXRlU3RyaW5nIiwidGhlbWUiLCJmZWF0dXJlZCIsInNob3dPblBvc3QiLCJmZWF0dXJlZF9tZWRpYSIsImNvbnRlbnQiLCJjb25uZWN0IiwiQ29udGFpbmVyIiwiVGl0bGUiLCJTdHlsZWRMaW5rIiwiTGluayIsIkF1dGhvciIsIkRhdGVXcmFwcGVyIiwiQ29udGVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztxUkFNQSxHQUFNQSxLQUFJLENBQUcsUUFBbUMsSUFBbEMsQ0FBRUMsS0FBRixDQUFTQyxPQUFULENBQWtCQyxTQUFsQixDQUFrQyxNQUM5Q0MsT0FBTyxDQUFDQyxHQUFSLENBQVksU0FBWixDQUF1QkosS0FBdkIsRUFDQTtBQUNBRyxPQUFPLENBQUNDLEdBQVIsQ0FBWSxXQUFaLENBQXlCSCxPQUF6QixFQUNBRSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxhQUFaLENBQTJCRixTQUEzQixFQUVBO0FBQ0EsR0FBTUcsS0FBSSxDQUFHTCxLQUFLLENBQUNNLE1BQU4sQ0FBYUMsR0FBYixDQUFpQlAsS0FBSyxDQUFDUSxNQUFOLENBQWFDLElBQTlCLENBQWIsQ0FDQU4sT0FBTyxDQUFDQyxHQUFSLENBQVksYUFBWixDQUEyQkMsSUFBSSxDQUFDSyxJQUFoQyxDQUFzQ0wsSUFBSSxDQUFDTSxFQUEzQyxFQUNBO0FBQ0EsR0FBTUMsS0FBSSxDQUFHWixLQUFLLENBQUNNLE1BQU4sQ0FBYUQsSUFBSSxDQUFDSyxJQUFsQixFQUF3QkwsSUFBSSxDQUFDTSxFQUE3QixDQUFiLENBQ0E7QUFDQSxHQUFNRSxPQUFNLENBQUdiLEtBQUssQ0FBQ00sTUFBTixDQUFhTyxNQUFiLENBQW9CRCxJQUFJLENBQUNDLE1BQXpCLENBQWYsQ0FDQTtBQUNBLEdBQU1DLEtBQUksQ0FBRyxHQUFJQyxLQUFKLENBQVNILElBQUksQ0FBQ0UsSUFBZCxDQUFiLENBRUE7QUFDQSxHQUFNRSxXQUFVLENBQUdkLFNBQVMsQ0FBQ2UsVUFBVixDQUFxQkMsU0FBeEMsQ0FFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBLEtBQ0VDLHVEQUFTLENBQUMsSUFBTSxDQUNkbEIsT0FBTyxDQUFDSyxNQUFSLENBQWVjLEtBQWYsQ0FBcUIsR0FBckIsRUFDQUMsNkNBQUksQ0FBQ0MsT0FBTCxHQUNELENBSFEsQ0FHTixFQUhNLENBQVQsQ0FLQTtBQUNBLE1BQU9qQixLQUFJLENBQUNrQixPQUFMLENBQ0wsMERBQUMsU0FBRCxNQUNFLHFFQUNFLDBEQUFDLEtBQUQsRUFBTyx1QkFBdUIsQ0FBRSxDQUFFQyxNQUFNLENBQUVaLElBQUksQ0FBQ2EsS0FBTCxDQUFXQyxRQUFyQixDQUFoQyxFQURGLENBSUdyQixJQUFJLENBQUNzQixNQUFMLEVBQ0MscUVBQ0dkLE1BQU0sRUFDTCwwREFBQyxVQUFELEVBQVksSUFBSSxDQUFFQSxNQUFNLENBQUNKLElBQXpCLEVBQ0UsMERBQUMsTUFBRCxZQUNLLG1FQUFJSSxNQUFNLENBQUNlLElBQVgsQ0FETCxDQURGLENBRkosQ0FRRSwwREFBQyxXQUFELE1BQ0csR0FESCxPQUVLLG1FQUFJZCxJQUFJLENBQUNlLFlBQUwsRUFBSixDQUZMLENBUkYsQ0FMSixDQURGLENBdUJHN0IsS0FBSyxDQUFDOEIsS0FBTixDQUFZQyxRQUFaLENBQXFCQyxVQUFyQixFQUNDLDBEQUFDLHVEQUFELEVBQWUsRUFBRSxDQUFFcEIsSUFBSSxDQUFDcUIsY0FBeEIsRUF4QkosQ0E2QkUsMERBQUMsT0FBRCxNQUNFLDBEQUFDLFVBQUQsRUFBWSxJQUFJLENBQUVyQixJQUFJLENBQUNzQixPQUFMLENBQWFSLFFBQS9CLEVBREYsQ0E3QkYsQ0FESyxDQWtDSCxJQWxDSixDQW1DRCxDQWpFRCxDQW1FZVMsdUhBQU8sQ0FBQ3BDLElBQUQsQ0FBdEIsRUFFQSxHQUFNcUMsVUFBUyxvd1FBQWYsQ0FNQSxHQUFNQyxNQUFLLDZ4UUFBWCxDQU9BLEdBQU1DLFdBQVUsQ0FBRyxrRkFBT0MsNkNBQVAsd0NBQUgsK25RQUFoQixDQUlBLEdBQU1DLE9BQU0scXhRQUFaLENBTUEsR0FBTUMsWUFBVywweFFBQWpCLENBTUE7QUFDQTtBQUNBO0FBQ0EsR0FDQSxHQUFNQyxRQUFPLDRxVEFBYiIsImZpbGUiOiIuL3BhY2thZ2VzL21hcnMtdGhlbWUvc3JjL2NvbXBvbmVudHMvcG9zdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCwgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCI7XHJcbmltcG9ydCBMaW5rIGZyb20gXCIuL2xpbmtcIjtcclxuaW1wb3J0IExpc3QgZnJvbSBcIi4vbGlzdFwiO1xyXG5pbXBvcnQgRmVhdHVyZWRNZWRpYSBmcm9tIFwiLi9mZWF0dXJlZC1tZWRpYVwiO1xyXG5cclxuY29uc3QgUG9zdCA9ICh7IHN0YXRlLCBhY3Rpb25zLCBsaWJyYXJpZXMgfSkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKFwic3RhdGU6IFwiLCBzdGF0ZSk7XHJcbiAgLy8gd2luZG93LnN0YXRlID0gc3RhdGU7XHJcbiAgY29uc29sZS5sb2coXCJhY3Rpb25zOiBcIiwgYWN0aW9ucyk7XHJcbiAgY29uc29sZS5sb2coXCJsaWJyYXJpZXM6IFwiLCBsaWJyYXJpZXMpO1xyXG5cclxuICAvLyBHZXQgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgVVJMLlxyXG4gIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcclxuICBjb25zb2xlLmxvZyhcImRhdGEgcG9zdDogXCIsIGRhdGEudHlwZSwgZGF0YS5pZCk7XHJcbiAgLy8gR2V0IHRoZSBkYXRhIG9mIHRoZSBwb3N0LlxyXG4gIGNvbnN0IHBvc3QgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcclxuICAvLyBHZXQgdGhlIGRhdGEgb2YgdGhlIGF1dGhvci5cclxuICBjb25zdCBhdXRob3IgPSBzdGF0ZS5zb3VyY2UuYXV0aG9yW3Bvc3QuYXV0aG9yXTtcclxuICAvLyBHZXQgYSBodW1hbiByZWFkYWJsZSBkYXRlLlxyXG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShwb3N0LmRhdGUpO1xyXG5cclxuICAvLyBHZXQgdGhlIGh0bWwycmVhY3QgY29tcG9uZW50LlxyXG4gIGNvbnN0IEh0bWwyUmVhY3QgPSBsaWJyYXJpZXMuaHRtbDJyZWFjdC5Db21wb25lbnQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIE9uY2UgdGhlIHBvc3QgaGFzIGxvYWRlZCBpbiB0aGUgRE9NLCBwcmVmZXRjaCBib3RoIHRoZVxyXG4gICAqIGhvbWUgcG9zdHMgYW5kIHRoZSBsaXN0IGNvbXBvbmVudCBzbyBpZiB0aGUgdXNlciB2aXNpdHNcclxuICAgKiB0aGUgaG9tZSBwYWdlLCBldmVyeXRoaW5nIGlzIHJlYWR5IGFuZCBpdCBsb2FkcyBpbnN0YW50bHkuXHJcbiAgICovXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGFjdGlvbnMuc291cmNlLmZldGNoKFwiL1wiKTtcclxuICAgIExpc3QucHJlbG9hZCgpO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgLy8gTG9hZCB0aGUgcG9zdCwgYnV0IG9ubHkgaWYgdGhlIGRhdGEgaXMgcmVhZHkuXHJcbiAgcmV0dXJuIGRhdGEuaXNSZWFkeSA/IChcclxuICAgIDxDb250YWluZXI+XHJcbiAgICAgIDxkaXY+XHJcbiAgICAgICAgPFRpdGxlIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogcG9zdC50aXRsZS5yZW5kZXJlZCB9fSAvPlxyXG5cclxuICAgICAgICB7LyogT25seSBkaXNwbGF5IGF1dGhvciBhbmQgZGF0ZSBvbiBwb3N0cyAqL31cclxuICAgICAgICB7ZGF0YS5pc1Bvc3QgJiYgKFxyXG4gICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAge2F1dGhvciAmJiAoXHJcbiAgICAgICAgICAgICAgPFN0eWxlZExpbmsgbGluaz17YXV0aG9yLmxpbmt9PlxyXG4gICAgICAgICAgICAgICAgPEF1dGhvcj5cclxuICAgICAgICAgICAgICAgICAgQnkgPGI+e2F1dGhvci5uYW1lfTwvYj5cclxuICAgICAgICAgICAgICAgIDwvQXV0aG9yPlxyXG4gICAgICAgICAgICAgIDwvU3R5bGVkTGluaz5cclxuICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgPERhdGVXcmFwcGVyPlxyXG4gICAgICAgICAgICAgIHtcIiBcIn1cclxuICAgICAgICAgICAgICBvbiA8Yj57ZGF0ZS50b0RhdGVTdHJpbmcoKX08L2I+XHJcbiAgICAgICAgICAgIDwvRGF0ZVdyYXBwZXI+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApfVxyXG4gICAgICA8L2Rpdj5cclxuXHJcbiAgICAgIHsvKiBMb29rIGF0IHRoZSBzZXR0aW5ncyB0byBzZWUgaWYgd2Ugc2hvdWxkIGluY2x1ZGUgdGhlIGZlYXR1cmVkIGltYWdlICovfVxyXG4gICAgICB7c3RhdGUudGhlbWUuZmVhdHVyZWQuc2hvd09uUG9zdCAmJiAoXHJcbiAgICAgICAgPEZlYXR1cmVkTWVkaWEgaWQ9e3Bvc3QuZmVhdHVyZWRfbWVkaWF9IC8+XHJcbiAgICAgICl9XHJcblxyXG4gICAgICB7LyogUmVuZGVyIHRoZSBjb250ZW50IHVzaW5nIHRoZSBIdG1sMlJlYWN0IGNvbXBvbmVudCBzbyB0aGUgSFRNTCBpcyBwcm9jZXNzZWRcclxuICAgICAgIGJ5IHRoZSBwcm9jZXNzb3JzIHdlIGluY2x1ZGVkIGluIHRoZSBsaWJyYXJpZXMuaHRtbDJyZWFjdC5wcm9jZXNzb3JzIGFycmF5LiAqL31cclxuICAgICAgPENvbnRlbnQ+XHJcbiAgICAgICAgPEh0bWwyUmVhY3QgaHRtbD17cG9zdC5jb250ZW50LnJlbmRlcmVkfSAvPlxyXG4gICAgICA8L0NvbnRlbnQ+XHJcbiAgICA8L0NvbnRhaW5lcj5cclxuICApIDogbnVsbDtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoUG9zdCk7XHJcblxyXG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIHdpZHRoOiA4MDBweDtcclxuICBtYXJnaW46IDA7XHJcbiAgcGFkZGluZzogMjRweDtcclxuYDtcclxuXHJcbmNvbnN0IFRpdGxlID0gc3R5bGVkLmgxYFxyXG4gIG1hcmdpbjogMDtcclxuICBtYXJnaW4tdG9wOiAyNHB4O1xyXG4gIG1hcmdpbi1ib3R0b206IDhweDtcclxuICBjb2xvcjogcmdiYSgxMiwgMTcsIDQzKTtcclxuYDtcclxuXHJcbmNvbnN0IFN0eWxlZExpbmsgPSBzdHlsZWQoTGluaylgXHJcbiAgcGFkZGluZzogMTVweCAwO1xyXG5gO1xyXG5cclxuY29uc3QgQXV0aG9yID0gc3R5bGVkLnBgXHJcbiAgY29sb3I6IHJnYmEoMTIsIDE3LCA0MywgMC45KTtcclxuICBmb250LXNpemU6IDAuOWVtO1xyXG4gIGRpc3BsYXk6IGlubGluZTtcclxuYDtcclxuXHJcbmNvbnN0IERhdGVXcmFwcGVyID0gc3R5bGVkLnBgXHJcbiAgY29sb3I6IHJnYmEoMTIsIDE3LCA0MywgMC45KTtcclxuICBmb250LXNpemU6IDAuOWVtO1xyXG4gIGRpc3BsYXk6IGlubGluZTtcclxuYDtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGNvbXBvbmVudCBpcyB0aGUgcGFyZW50IG9mIHRoZSBgY29udGVudC5yZW5kZXJlZGAgSFRNTC4gV2UgY2FuIHVzZSBuZXN0ZWRcclxuICogc2VsZWN0b3JzIHRvIHN0eWxlIHRoYXQgSFRNTC5cclxuICovXHJcbmNvbnN0IENvbnRlbnQgPSBzdHlsZWQuZGl2YFxyXG4gIGNvbG9yOiByZ2JhKDEyLCAxNywgNDMsIDAuOCk7XHJcbiAgd29yZC1icmVhazogYnJlYWstd29yZDtcclxuXHJcbiAgKiB7XHJcbiAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgfVxyXG5cclxuICBwIHtcclxuICAgIGxpbmUtaGVpZ2h0OiAxLjZlbTtcclxuICB9XHJcblxyXG4gIGltZyB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIG9iamVjdC1maXQ6IGNvdmVyO1xyXG4gICAgb2JqZWN0LXBvc2l0aW9uOiBjZW50ZXI7XHJcbiAgfVxyXG5cclxuICBmaWd1cmUge1xyXG4gICAgbWFyZ2luOiAyNHB4IGF1dG87XHJcbiAgICAvKiBuZXh0IGxpbmUgb3ZlcnJpZGVzIGFuIGlubGluZSBzdHlsZSBvZiB0aGUgZmlndXJlIGVsZW1lbnQuICovXHJcbiAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xyXG5cclxuICAgIGZpZ2NhcHRpb24ge1xyXG4gICAgICBmb250LXNpemU6IDAuN2VtO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWZyYW1lIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgbWFyZ2luOiBhdXRvO1xyXG4gIH1cclxuXHJcbiAgYmxvY2txdW90ZSB7XHJcbiAgICBtYXJnaW46IDE2cHggMDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4xKTtcclxuICAgIGJvcmRlci1sZWZ0OiA0cHggc29saWQgcmdiYSgxMiwgMTcsIDQzKTtcclxuICAgIHBhZGRpbmc6IDRweCAxNnB4O1xyXG4gIH1cclxuXHJcbiAgYSB7XHJcbiAgICBjb2xvcjogcmdiKDMxLCA1NiwgMTk3KTtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xyXG4gIH1cclxuXHJcbiAgLyogSW5wdXQgZmllbGRzIHN0eWxlcyAqL1xyXG5cclxuICBpbnB1dFt0eXBlPVwidGV4dFwiXSxcclxuICBpbnB1dFt0eXBlPVwiZW1haWxcIl0sXHJcbiAgaW5wdXRbdHlwZT1cInVybFwiXSxcclxuICBpbnB1dFt0eXBlPVwidGVsXCJdLFxyXG4gIGlucHV0W3R5cGU9XCJudW1iZXJcIl0sXHJcbiAgaW5wdXRbdHlwZT1cImRhdGVcIl0sXHJcbiAgdGV4dGFyZWEsXHJcbiAgc2VsZWN0IHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgcGFkZGluZzogNnB4IDEycHg7XHJcbiAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICBmb250LXdlaWdodDogNDAwO1xyXG4gICAgbGluZS1oZWlnaHQ6IDEuNTtcclxuICAgIGNvbG9yOiAjNDk1MDU3O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxuICAgIGJhY2tncm91bmQtY2xpcDogcGFkZGluZy1ib3g7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2VkNGRhO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgb3V0bGluZS1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcbiAgICB0cmFuc2l0aW9uOiBvdXRsaW5lLWNvbG9yIDAuMTVzIGVhc2UtaW4tb3V0LCBib3gtc2hhZG93IDAuMTVzIGVhc2UtaW4tb3V0O1xyXG4gICAgbWFyZ2luOiA4cHggMCA0cHggMDtcclxuXHJcbiAgICAmOmZvY3VzIHtcclxuICAgICAgb3V0bGluZS1jb2xvcjogIzFmMzhjNTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlucHV0W3R5cGU9XCJzdWJtaXRcIl0ge1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMDtcclxuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xyXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxuICAgIC1tcy10b3VjaC1hY3Rpb246IG1hbmlwdWxhdGlvbjtcclxuICAgIHRvdWNoLWFjdGlvbjogbWFuaXB1bGF0aW9uO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICMxZjM4YzU7XHJcbiAgICBwYWRkaW5nOiAxMnB4IDM2cHg7XHJcbiAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICBsaW5lLWhlaWdodDogMS40Mjg1NzE0MztcclxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFmMzhjNTtcclxuICB9XHJcblxyXG4gIC8qIFdvcmRQcmVzcyBDb3JlIEFsaWduIENsYXNzZXMgKi9cclxuXHJcbiAgQG1lZGlhIChtaW4td2lkdGg6IDQyMHB4KSB7XHJcbiAgICBpbWcuYWxpZ25jZW50ZXIsXHJcbiAgICBpbWcuYWxpZ25sZWZ0LFxyXG4gICAgaW1nLmFsaWducmlnaHQge1xyXG4gICAgICB3aWR0aDogYXV0bztcclxuICAgIH1cclxuXHJcbiAgICAuYWxpZ25jZW50ZXIge1xyXG4gICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgbWFyZ2luLWxlZnQ6IGF1dG87XHJcbiAgICAgIG1hcmdpbi1yaWdodDogYXV0bztcclxuICAgIH1cclxuXHJcbiAgICAuYWxpZ25yaWdodCB7XHJcbiAgICAgIGZsb2F0OiByaWdodDtcclxuICAgICAgbWFyZ2luLWxlZnQ6IDI0cHg7XHJcbiAgICB9XHJcblxyXG4gICAgLmFsaWdubGVmdCB7XHJcbiAgICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgICBtYXJnaW4tcmlnaHQ6IDI0cHg7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/post.js\n");

/***/ })

})